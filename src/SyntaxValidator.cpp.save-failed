#include "SyntaxValidator.h"
#include <string.h>

const int SyntaxValidator::INVALID = 0;
const int SyntaxValidator::INSTRUCTION = 1;
const int SyntaxValidator::DIRECTIVE = 2;

// constructor
SyntaxValidator::SyntaxValidator(){
    this->opCodeTable = OpCodeTable::getOpTable();
}

bool SyntaxValidator::isValid(SourceLine srcLine){
    this->sourceLine = srcLine;
    int operationType = checkOperation(this->sourceLine.getOperation());
    if(operationType == this->INSTRUCTION){
        return this->checkInstructionOperand();
    }else if(operationType == this->DIRECTIVE){
        // return this->checkDirectiveOpernad();
    }else{
        return false;
    }
}

string SyntaxValidator::getErrorMessage(){
    return this->errorMessage;
}

int SyntaxValidator::checkOperation(std::string operation){
    // check for format 4 (+op)
    bool prefixedByPlus = false;
    std::string nonPrefixedOperation;
    if(operation[0]=='+'){
        prefixedByPlus = true;
        nonPrefixedOperation = operation.substr(1);
        this->sourceLine.setOperation(nonPrefixedOperation);
    }else{
        nonPrefixedOperation = operation;
    }
    OpInfo info = opCodeTable->getInfo(nonPrefixedOperation);
    if(info.getOpCode() != OpInfo::NOT_FOUND){
        if(info.getFormateBytes() == 2 && prefixedByPlus){
            this->errorMessage = "can't use format 4 with " + nonPrefixedOperation;
            return INVALID;
        }
        return INSTRUCTION;
    }
    ///ToDO: edit directives DS
    else if(operation=="BYTE" || operation =="WORD"
            || operation == "RESB" || operation =="RESW"
            || operation=="START" || operation =="END"){
        return DIRECTIVE;
    }else{
        this->errorMessage = operation + " is invalid operation";
        return INVALID;
    }
}

bool SyntaxValidator::checkInstructionOperand(){
    OpInfo info = OpCodeTable->getInfo(this->sourceLine.getOperation());

}

bool SyntaxValidator::checkInstructionOperand(){

}
